#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="master")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertChildIllness(ChildIllness instance);
  partial void UpdateChildIllness(ChildIllness instance);
  partial void DeleteChildIllness(ChildIllness instance);
  partial void InsertIllness(Illness instance);
  partial void UpdateIllness(Illness instance);
  partial void DeleteIllness(Illness instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  partial void InsertUsers(Users instance);
  partial void UpdateUsers(Users instance);
  partial void DeleteUsers(Users instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["masterConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<ChildIllness> ChildIllnesses
	{
		get
		{
			return this.GetTable<ChildIllness>();
		}
	}
	
	public System.Data.Linq.Table<Illness> Illnesses
	{
		get
		{
			return this.GetTable<Illness>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	public System.Data.Linq.Table<Users> Users
	{
		get
		{
			return this.GetTable<Users>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChildIllness")]
public partial class ChildIllness : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _Start;
	
	private string _socialSecurity;
	
	private System.Nullable<int> _AnstalldId;
	
	private EntityRef<Users> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnsocialSecurityChanging(string value);
    partial void OnsocialSecurityChanged();
    partial void OnAnstalldIdChanging(System.Nullable<int> value);
    partial void OnAnstalldIdChanged();
    #endregion
	
	public ChildIllness()
	{
		this._Users = default(EntityRef<Users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="DateTime NOT NULL")]
	public System.DateTime Start
	{
		get
		{
			return this._Start;
		}
		set
		{
			if ((this._Start != value))
			{
				this.OnStartChanging(value);
				this.SendPropertyChanging();
				this._Start = value;
				this.SendPropertyChanged("Start");
				this.OnStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_socialSecurity", DbType="NChar(11)")]
	public string socialSecurity
	{
		get
		{
			return this._socialSecurity;
		}
		set
		{
			if ((this._socialSecurity != value))
			{
				this.OnsocialSecurityChanging(value);
				this.SendPropertyChanging();
				this._socialSecurity = value;
				this.SendPropertyChanged("socialSecurity");
				this.OnsocialSecurityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnstalldId", DbType="Int")]
	public System.Nullable<int> AnstalldId
	{
		get
		{
			return this._AnstalldId;
		}
		set
		{
			if ((this._AnstalldId != value))
			{
				if (this._Users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAnstalldIdChanging(value);
				this.SendPropertyChanging();
				this._AnstalldId = value;
				this.SendPropertyChanged("AnstalldId");
				this.OnAnstalldIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_ChildIllness", Storage="_Users", ThisKey="AnstalldId", OtherKey="Id", IsForeignKey=true)]
	public Users Users
	{
		get
		{
			return this._Users.Entity;
		}
		set
		{
			Users previousValue = this._Users.Entity;
			if (((previousValue != value) 
						|| (this._Users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Users.Entity = null;
					previousValue.ChildIllnesses.Remove(this);
				}
				this._Users.Entity = value;
				if ((value != null))
				{
					value.ChildIllnesses.Add(this);
					this._AnstalldId = value.Id;
				}
				else
				{
					this._AnstalldId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Illness")]
public partial class Illness : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _Start;
	
	private System.DateTime _Expires;
	
	private bool _medicalCertifcate;
	
	private System.Nullable<int> _AnstalldId;
	
	private EntityRef<Users> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnExpiresChanging(System.DateTime value);
    partial void OnExpiresChanged();
    partial void OnmedicalCertifcateChanging(bool value);
    partial void OnmedicalCertifcateChanged();
    partial void OnAnstalldIdChanging(System.Nullable<int> value);
    partial void OnAnstalldIdChanged();
    #endregion
	
	public Illness()
	{
		this._Users = default(EntityRef<Users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="DateTime NOT NULL")]
	public System.DateTime Start
	{
		get
		{
			return this._Start;
		}
		set
		{
			if ((this._Start != value))
			{
				this.OnStartChanging(value);
				this.SendPropertyChanging();
				this._Start = value;
				this.SendPropertyChanged("Start");
				this.OnStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expires", DbType="DateTime NOT NULL")]
	public System.DateTime Expires
	{
		get
		{
			return this._Expires;
		}
		set
		{
			if ((this._Expires != value))
			{
				this.OnExpiresChanging(value);
				this.SendPropertyChanging();
				this._Expires = value;
				this.SendPropertyChanged("Expires");
				this.OnExpiresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalCertifcate", DbType="Int NOT NULL")]
	public bool medicalCertifcate
	{
		get
		{
			return this._medicalCertifcate;
		}
		set
		{
			if ((this._medicalCertifcate != value))
			{
				this.OnmedicalCertifcateChanging(value);
				this.SendPropertyChanging();
				this._medicalCertifcate = value;
				this.SendPropertyChanged("medicalCertifcate");
				this.OnmedicalCertifcateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnstalldId", DbType="Int")]
	public System.Nullable<int> AnstalldId
	{
		get
		{
			return this._AnstalldId;
		}
		set
		{
			if ((this._AnstalldId != value))
			{
				if (this._Users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAnstalldIdChanging(value);
				this.SendPropertyChanging();
				this._AnstalldId = value;
				this.SendPropertyChanged("AnstalldId");
				this.OnAnstalldIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Illness", Storage="_Users", ThisKey="AnstalldId", OtherKey="Id", IsForeignKey=true)]
	public Users Users
	{
		get
		{
			return this._Users.Entity;
		}
		set
		{
			Users previousValue = this._Users.Entity;
			if (((previousValue != value) 
						|| (this._Users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Users.Entity = null;
					previousValue.Illnesses.Remove(this);
				}
				this._Users.Entity = value;
				if ((value != null))
				{
					value.Illnesses.Add(this);
					this._AnstalldId = value.Id;
				}
				else
				{
					this._AnstalldId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _RoleName;
	
	private EntityRef<Users> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
	
	public Role()
	{
		this._Users = default(EntityRef<Users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				if (this._Users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NChar(25) NOT NULL", CanBeNull=false)]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Role", Storage="_Users", ThisKey="Id", OtherKey="Role", IsForeignKey=true)]
	public Users Users
	{
		get
		{
			return this._Users.Entity;
		}
		set
		{
			Users previousValue = this._Users.Entity;
			if (((previousValue != value) 
						|| (this._Users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Users.Entity = null;
					previousValue.Roles.Remove(this);
				}
				this._Users.Entity = value;
				if ((value != null))
				{
					value.Roles.Add(this);
					this._Id = value.Role;
				}
				else
				{
					this._Id = default(int);
				}
				this.SendPropertyChanged("Users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Password;
	
	private int _Role;
	
	private EntitySet<Role> _Roles;
	
	private EntitySet<ChildIllness> _ChildIllnesses;
	
	private EntitySet<Illness> _Illnesses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    #endregion
	
	public Users()
	{
		this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
		this._ChildIllnesses = new EntitySet<ChildIllness>(new Action<ChildIllness>(this.attach_ChildIllnesses), new Action<ChildIllness>(this.detach_ChildIllnesses));
		this._Illnesses = new EntitySet<Illness>(new Action<Illness>(this.attach_Illnesses), new Action<Illness>(this.detach_Illnesses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(1000) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
	public int Role
	{
		get
		{
			return this._Role;
		}
		set
		{
			if ((this._Role != value))
			{
				this.OnRoleChanging(value);
				this.SendPropertyChanging();
				this._Role = value;
				this.SendPropertyChanged("Role");
				this.OnRoleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Role", Storage="_Roles", ThisKey="Role", OtherKey="Id")]
	public EntitySet<Role> Roles
	{
		get
		{
			return this._Roles;
		}
		set
		{
			this._Roles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_ChildIllness", Storage="_ChildIllnesses", ThisKey="Id", OtherKey="AnstalldId")]
	public EntitySet<ChildIllness> ChildIllnesses
	{
		get
		{
			return this._ChildIllnesses;
		}
		set
		{
			this._ChildIllnesses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Illness", Storage="_Illnesses", ThisKey="Id", OtherKey="AnstalldId")]
	public EntitySet<Illness> Illnesses
	{
		get
		{
			return this._Illnesses;
		}
		set
		{
			this._Illnesses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.Users = this;
	}
	
	private void detach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.Users = null;
	}
	
	private void attach_ChildIllnesses(ChildIllness entity)
	{
		this.SendPropertyChanging();
		entity.Users = this;
	}
	
	private void detach_ChildIllnesses(ChildIllness entity)
	{
		this.SendPropertyChanging();
		entity.Users = null;
	}
	
	private void attach_Illnesses(Illness entity)
	{
		this.SendPropertyChanging();
		entity.Users = this;
	}
	
	private void detach_Illnesses(Illness entity)
	{
		this.SendPropertyChanging();
		entity.Users = null;
	}
}
#pragma warning restore 1591
